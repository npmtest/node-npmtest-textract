{"/home/travis/build/npmtest/node-npmtest-textract/test.js":"/* istanbul instrument in package npmtest_textract */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-textract/lib.npmtest_textract.js":"/* istanbul instrument in package npmtest_textract */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_textract = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_textract = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-textract/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-textract && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_textract */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_textract\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_textract.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_textract.rollup.js'] =\n            local.assetsDict['/assets.npmtest_textract.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_textract.__dirname + '/lib.npmtest_textract.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/index.js":"var fs = require( 'fs' )\n  , path = require( 'path' )\n  , mime = require( 'mime' )\n  , extract = require( './extract' )\n  , os = require( 'os' )\n  , got = require( 'got' )\n  , tmpDir = os.tmpdir()\n  ;\n\nfunction _genRandom() {\n  return Math.floor( ( Math.random() * 100000000000 ) + 1 );\n}\n\nfunction _extractWithType( type, filePath, options, cb ) {\n  fs.exists( filePath, function( exists ) {\n    if ( exists ) {\n      extract( type, filePath, options, cb );\n    } else {\n      cb( new Error( 'File at path [[ ' + filePath + ' ]] does not exist.' ), null );\n    }\n  });\n}\n\nfunction _returnArgsError( _args ) {\n  var args = Array.prototype.slice.call( _args )\n    , callback\n    ;\n\n  args.forEach( function( parm ) {\n    if ( parm && typeof parm === 'function' ) {\n      callback = parm;\n    }\n  });\n\n  if ( callback ) {\n    callback( new Error( 'Incorrect parameters passed to textract.' ), null );\n  } else {\n    // eslint-disable-next-line no-console\n    console.error( 'textract could not find a callback function to execute.' );\n  }\n}\n\nfunction _writeBufferToDisk( buff, cb ) {\n  var fullPath = path.join( tmpDir, 'textract_file_' + _genRandom() );\n\n  fs.open( fullPath, 'w', function( err, fd ) {\n    if ( err ) {\n      throw new Error( 'error opening temp file: ' + err );\n    } else {\n      fs.write( fd, buff, 0, buff.length, null, function( err2 ) {\n        if ( err2 ) {\n          throw new Error( 'error writing temp file: ' + err2 );\n        } else {\n          fs.close( fd, function() {\n            cb( fullPath );\n          });\n        }\n      });\n    }\n  });\n}\n\nfunction fromFileWithMimeAndPath( type, filePath, options, cb ) {\n  var called = false;\n\n  if ( typeof type === 'string' && typeof filePath === 'string' ) {\n    if ( typeof cb === 'function' && typeof options === 'object' ) {\n      // (mimeType, filePath, options, callback)\n      _extractWithType( type, filePath, options, cb );\n      called = true;\n    } else if ( typeof options === 'function' && cb === undefined ) {\n      // (mimeType, filePath, callback)\n      _extractWithType( type, filePath, {}, options );\n      called = true;\n    }\n  }\n\n  if ( !called ) {\n    _returnArgsError( arguments );\n  }\n}\n\nfunction fromFileWithPath( filePath, options, cb ) {\n  var type;\n  if ( typeof filePath === 'string' &&\n       ( typeof options === 'function' || typeof cb === 'function' ) ) {\n    type = ( options && options.typeOverride ) || mime.lookup( filePath );\n    fromFileWithMimeAndPath( type, filePath, options, cb );\n  } else {\n    _returnArgsError( arguments );\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction fromBufferWithMime( type, bufferContent, options, cb, withPath ) {\n  if ( typeof type === 'string' &&\n       bufferContent &&\n       bufferContent instanceof Buffer &&\n       ( typeof options === 'function' || typeof cb === 'function' ) ) {\n    _writeBufferToDisk( bufferContent, function( newPath ) {\n      fromFileWithMimeAndPath( type, newPath, options, cb );\n    });\n  } else {\n    _returnArgsError( arguments );\n  }\n}\n\nfunction fromBufferWithName( filePath, bufferContent, options, cb ) {\n  var type;\n  if ( typeof filePath === 'string' ) {\n    type = mime.lookup( filePath );\n    fromBufferWithMime( type, bufferContent, options, cb, true );\n  } else {\n    _returnArgsError( arguments );\n  }\n}\n\nfunction fromUrl( url, options, cb ) {\n  var urlNoQueryParams, extname, filePath, fullFilePath, file, href, callbackCalled;\n\n  // allow url to be either a string or to be a\n  // Node URL Object: https://nodejs.org/api/url.html\n  href = ( typeof url === 'string' ) ? url : url.href;\n\n  if ( href ) {\n    options = options || {};\n    urlNoQueryParams = href.split( '?' )[0];\n    extname = path.extname( urlNoQueryParams );\n    filePath = _genRandom() + extname;\n    fullFilePath = path.join( tmpDir, filePath );\n    file = fs.createWriteStream( fullFilePath );\n    file.on( 'finish', function() {\n      if ( !callbackCalled ) {\n        fromFileWithPath( fullFilePath, options, cb );\n      }\n    });\n\n    got.stream( url )\n      .on( 'response', function( response ) {\n        // allows for overriding by the developer or automatically\n        // populating based on server response.\n        if ( !options.typeOverride ) {\n          options.typeOverride = response.headers['content-type'].split( /;/ )[0];\n        }\n      })\n      .on( 'error', function( error ) {\n        var _cb = ( typeof options === 'function' ) ? options : cb;\n        callbackCalled = true;\n        _cb( error );\n      })\n      .pipe( file );\n  } else {\n    _returnArgsError( arguments );\n  }\n}\n\nmodule.exports = {\n  fromFileWithPath: fromFileWithPath,\n  fromFileWithMimeAndPath: fromFileWithMimeAndPath,\n  fromBufferWithName: fromBufferWithName,\n  fromBufferWithMime: fromBufferWithMime,\n  fromUrl: fromUrl\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extract.js":"var fs = require( 'fs' )\n  , path = require( 'path' )\n  , XmlEntities = require( 'html-entities' ).XmlEntities\n  , util = require( './util' )\n  , extractorPath = path.join( __dirname, 'extractors' )\n  , entities = new XmlEntities()\n  , typeExtractors = {}\n  , regexExtractors = []\n  , failedExtractorTypes = {}\n  , totalExtractors = 0\n  , satisfiedExtractors = 0\n  , hasInitialized = false\n  , WHITELIST_PRESERVE_LINEBREAKS = /[^A-Za-z\\x80-\\xFF\\x24\\u20AC\\xA3\\xA5 0-9 \\u2018\\u2019\\u201C|\\u201D\\u2026 \\uFF0C \\u2013 \\u2014 \\u00C0-\\u1FFF \\u2C00-\\uD7FF \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~'-\\w\\n\\r]*/g  // eslint-disable-line max-len\n  , WHITELIST_STRIP_LINEBREAKS = /[^A-Za-z\\x80-\\xFF\\x24\\u20AC\\xA3\\xA5 0-9 \\u2018\\u2019\\u201C|\\u201D\\u2026 \\uFF0C \\u2013 \\u2014 \\u00C0-\\u1FFF \\u2C00-\\uD7FF \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~'-\\w]*/g  // eslint-disable-line max-len\n  ;\n\nfunction registerExtractor( extractor ) {\n  if ( extractor.types ) {\n    extractor.types.forEach( function( type ) {\n      if ( typeof type === 'string' ) {\n        type = type.toLowerCase();\n        typeExtractors[type] = extractor.extract;\n      } else {\n        if ( type instanceof RegExp ) {\n          regexExtractors.push({ reg: type, extractor: extractor.extract });\n        }\n      }\n    });\n  }\n}\n\nfunction registerFailedExtractor( extractor, failedMessage ) {\n  if ( extractor.types ) {\n    extractor.types.forEach( function( type ) {\n      failedExtractorTypes[type.toLowerCase()] = failedMessage;\n    });\n  }\n}\n\nfunction testExtractor( extractor, options ) {\n  extractor.test( options, function( passedTest, failedMessage ) {\n    satisfiedExtractors++;\n    if ( passedTest ) {\n      registerExtractor( extractor );\n    } else {\n      registerFailedExtractor( extractor, failedMessage );\n    }\n  });\n}\n\n// global, all file type, content cleansing\nfunction cleanseText( options, cb ) {\n  return function( error, text ) {\n    if ( !error ) {\n      // clean up text\n      text = util.replaceBadCharacters( text );\n\n      if ( options.preserveLineBreaks ) {\n        text = text.replace( WHITELIST_PRESERVE_LINEBREAKS, ' ' );\n      } else {\n        text = text.replace( WHITELIST_STRIP_LINEBREAKS, ' ' );\n      }\n\n      // multiple spaces, tabs, vertical tabs, non-breaking space]\n      text = text.replace( / (?! )/g, '' )\n        .replace( /[ \\t\\v\\u00A0]{2,}/g, ' ' );\n\n      text = entities.decode( text );\n    }\n    cb( error, text );\n  };\n}\n\nfunction initializeExtractors( options ) {\n  var extractors;\n\n  hasInitialized = true;\n\n  // discover available extractors\n  extractors = fs.readdirSync( extractorPath ).map( function( item ) {\n    var fullExtractorPath = path.join( extractorPath, item );\n    // get the extractor\n    // eslint-disable-next-line global-require\n    return require( fullExtractorPath );\n  });\n\n  // perform any binary tests to ensure extractor is possible\n  // given execution environment\n  extractors.forEach( function( extractor ) {\n    if ( extractor.test ) {\n      testExtractor( extractor, options );\n    } else {\n      satisfiedExtractors++;\n      registerExtractor( extractor );\n    }\n  });\n\n  // need to keep track of how many extractors we have in total\n  totalExtractors = extractors.length;\n}\n\nfunction findExtractor( type ) {\n  var i\n    , iLen = regexExtractors.length\n    , extractor\n    , regexExtractor\n    ;\n\n  type = type.toLowerCase();\n  if ( typeExtractors[type] ) {\n    extractor = typeExtractors[type];\n  } else {\n    for ( i = 0; i < iLen; i++ ) {\n      regexExtractor = regexExtractors[i];\n      if ( type.match( regexExtractor.reg ) ) {\n        extractor = regexExtractor.extractor;\n      }\n    }\n  }\n  return extractor;\n}\n\nfunction extract( type, filePath, options, cb ) {\n  var error, msg, theExtractor;\n\n  if ( !hasInitialized ) {\n    initializeExtractors( options );\n  }\n\n  // registration of extractors complete?\n  if ( totalExtractors === satisfiedExtractors ) {\n    theExtractor = findExtractor( type );\n\n    if ( theExtractor ) {\n      cb = cleanseText( options, cb );\n      theExtractor( filePath, options, cb );\n    } else {\n      // cannot extract this file type\n      msg = 'Error for type: [[ ' + type + ' ]], file: [[ ' + filePath + ' ]]';\n\n      // update error message if type is supported but just not configured/installed properly\n      if ( failedExtractorTypes[type] ) {\n        msg += ', extractor for type exists, but failed to initialize.' +\n          ' Message: ' + failedExtractorTypes[type];\n      }\n\n      error = new Error( msg );\n      error.typeNotFound = true;\n      cb( error, null );\n    }\n  } else {\n    // async registration has not wrapped up\n    // try again later\n    setTimeout( function() {\n      extract( type, filePath, options, cb );\n    }, 100 );\n  }\n}\n\nmodule.exports = extract;\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/util.js":"var exec = require( 'child_process' ).exec\n  , path = require( 'path' )\n  , fs = require( 'fs' )\n  , os = require( 'os' )\n  , outDir = path.join( os.tmpdir(), 'textract' )\n  , replacements = [\n    [/[\\u201C|\\u201D|]|â€œ|â€/g, '\"'], // fancy double quotes\n    [/[\\u2018|\\u2019]|â€™|â€˜]/g, '\\''], // fancy single quotes/apostrophes\n    [/â€¦/g, '…'], // elipses\n    [/â€“|â€”/g, '–'] // long hyphen\n  ]\n  , rLen = replacements.length\n  ;\n\n// Up front creation of tmp dir\nif ( !fs.existsSync( outDir ) ) {\n  fs.mkdirSync( outDir );\n}\n\n// replace nasty quotes with simple ones\nfunction replaceBadCharacters( text ) {\n  var i, repl;\n  for ( i = 0; i < rLen; i++ ) {\n    repl = replacements[i];\n    text = text.replace( repl[0], repl[1] );\n  }\n  return text;\n}\n\nfunction yauzlError( err, cb ) {\n  var msg = err.message;\n  if ( msg === 'end of central directory record signature not found' ) {\n    msg = 'File not correctly recognized as zip file, ' + msg;\n  }\n  cb( new Error( msg ), null );\n}\n\nfunction createExecOptions( type, options ) {\n  var execOptions = {};\n  if ( options[type] && options[type].exec ) {\n    execOptions = options[type].exec;\n  } else {\n    if ( options.exec ) {\n      execOptions = options.exec;\n    }\n  }\n  return execOptions;\n}\n\nfunction unzipCheck( type, cb ) {\n  exec( 'unzip',\n    function( error /* , stdout, stderr */ ) {\n      if ( error ) {\n        // eslint-disable-next-line no-console\n        console.error( 'textract: \\'unzip\\' does not appear to be installed, ' +\n          'so textract will be unable to extract ' + type + '.' );\n      }\n      cb( error === null );\n    }\n  );\n}\n\nfunction getTextFromZipFile( zipfile, entry, cb ) {\n  zipfile.openReadStream( entry, function( err, readStream ) {\n    var text = ''\n      , error = ''\n      ;\n\n    if ( err ) {\n      cb( err, null );\n      return;\n    }\n\n    readStream.on( 'data', function( chunk ) {\n      text += chunk;\n    });\n    readStream.on( 'end', function() {\n      if ( error.length > 0 ) {\n        cb( error, null );\n      } else {\n        cb( null, text );\n      }\n    });\n    readStream.on( 'error', function( _err ) {\n      error += _err;\n    });\n  });\n}\n\n/**\n * 1) builds an exec command using provided `genCommand` callback\n * 2) runs that command against an input file path\n *   resulting in an output file\n * 3) reads that output file in\n * 4) cleans the output file up\n * 5) executes a callback with the contents of the file\n *\n * @param {string} label Name for the extractor, e.g. `Tesseract`\n * @param {string} filePath path to file to be extractor\n * @param {object} options extractor options as provided\n *   via user configuration\n * @param {object} execOptions execution options passed to\n *   `exec` commmand as provided via user configuration\n * @param {function} genCommand function used to generate\n *   the command to be executed\n * @param {string} cb callback that is passed error/text\n *\n */\nfunction runExecIntoFile( label, filePath, options, execOptions, genCommand, cb ) {\n  // escape the file paths\n  var fileTempOutPath = path.join( outDir, path.basename( filePath, path.extname( filePath ) ) )\n    , escapedFilePath = filePath.replace( /\\s/g, '\\\\ ' )\n    , escapedFileTempOutPath = fileTempOutPath.replace( /\\s/g, '\\\\ ' )\n    , cmd = genCommand( options, escapedFilePath, escapedFileTempOutPath )\n    ;\n\n  exec( cmd, execOptions,\n    function( error /* , stdout, stderr */ ) {\n      if ( error !== null ) {\n        error = new Error( 'Error extracting [[ ' +\n          path.basename( filePath ) + ' ]], exec error: ' + error.message );\n        cb( error, null );\n        return;\n      }\n\n      fs.exists( fileTempOutPath + '.txt', function( exists ) {\n        if ( exists ) {\n          fs.readFile( fileTempOutPath + '.txt', 'utf8', function( error2, text ) {\n            if ( error2 ) {\n              error2 = new Error( 'Error reading' + label +\n                ' output at [[ ' + fileTempOutPath + ' ]], error: ' + error.message );\n              cb( error2, null );\n            } else {\n              fs.unlink( fileTempOutPath + '.txt', function( error3 ) {\n                if ( error3 ) {\n                  error3 = new Error( 'Error, ' + label +\n                    ' , cleaning up temp file [[ ' + fileTempOutPath +\n                    ' ]], error: ' + error.message );\n                  cb( error3, null );\n                } else {\n                  cb( null, text.toString() );\n                }\n              });\n            }\n          });\n        } else {\n          error = new Error( 'Error reading ' + label +\n            ' output at [[ ' + fileTempOutPath + ' ]], file does not exist' );\n          cb( error, null );\n        }\n      });\n    }\n  );\n}\n\nmodule.exports = {\n  createExecOptions: createExecOptions,\n  unzipCheck: unzipCheck,\n  getTextFromZipFile: getTextFromZipFile,\n  yauzlError: yauzlError,\n  runExecIntoFile: runExecIntoFile,\n  replaceBadCharacters: replaceBadCharacters\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/cli.js":"var path = require( 'path' )\n  , textract = require( './index' );\n\nmodule.exports = function( filePath, flags ) {\n  filePath = path.resolve( process.cwd(), filePath );\n\n  if ( flags.preserveLineBreaks === 'false' ) {\n    flags.preserveLineBreaks = false;\n  } else {\n    flags.preserveLineBreaks = true;\n  }\n\n  textract.fromFileWithPath( filePath, flags, function( error, text ) {\n    if ( error ) {\n      // eslint-disable-next-line no-console\n      console.error( error );\n    } else {\n      // eslint-disable-next-line no-console\n      console.log( text );\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/docx.js":"var xpath = require( 'xpath' )\n  , Dom = require( 'xmldom' ).DOMParser\n  , yauzl = require( 'yauzl' )\n  , util = require( '../util' )\n  , includeRegex = /.xml$/\n  , excludeRegex = /^(word\\/media\\/|word\\/_rels\\/)/\n  ;\n\nfunction _calculateExtractedText( inText ) {\n  var doc = new Dom().parseFromString( inText )\n    , ps = xpath.select( \"//*[local-name()='p']\", doc )\n    , text = ''\n    ;\n\n  ps.forEach( function( paragraph ) {\n    var ts\n      , localText = ''\n      ;\n\n    paragraph = new Dom().parseFromString( paragraph.toString() );\n    ts = xpath.select(\n      \"//*[local-name()='t' or local-name()='tab' or local-name()='br']\", paragraph );\n    ts.forEach( function( t ) {\n      if ( t.localName === 't' && t.childNodes.length > 0 ) {\n        localText += t.childNodes[0].data;\n      } else {\n        if ( t.localName === 'tab' || t.localName === 'br' ) {\n          localText += ' ';\n        }\n      }\n    });\n    text += localText + '\\n';\n  });\n\n  return text;\n}\n\nfunction extractText( filePath, options, cb ) {\n  var result = '';\n\n  yauzl.open( filePath, function( err, zipfile ) {\n    var processEnd\n      , processedEntries = 0\n      ;\n\n    if ( err ) {\n      util.yauzlError( err, cb );\n      return;\n    }\n\n    processEnd = function() {\n      var text;\n      if ( zipfile.entryCount === ++processedEntries ) {\n        if ( result.length ) {\n          text = _calculateExtractedText( result );\n          cb( null, text );\n        } else {\n          cb( new Error(\n            'Extraction could not find content in file, are you' +\n            ' sure it is the mime type it says it is?' ),\n            null );\n        }\n      }\n    };\n\n    zipfile.on( 'entry', function( entry ) {\n      if ( includeRegex.test( entry.fileName ) && !excludeRegex.test( entry.fileName ) ) {\n        util.getTextFromZipFile( zipfile, entry, function( err2, text ) {\n          result += text + '\\n';\n          processEnd();\n        });\n      } else {\n        processEnd();\n      }\n    });\n\n    zipfile.on( 'error', function( err3 ) {\n      cb( err3 );\n    });\n  });\n}\n\nmodule.exports = {\n  types: ['application/vnd.openxmlformats-officedocument.wordprocessingml.document'],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/dxf.js":"var exec = require( 'child_process' ).exec\n  , path = require( 'path' )\n  , util = require( '../util' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  var execOptions = util.createExecOptions( 'dxf', options )\n    , escapedPath = filePath.replace( /\\s/g, '\\\\ ' )\n    ;\n\n  exec( 'drawingtotext ' + escapedPath,\n    execOptions,\n    function( error, stdout, stderr ) {\n      if ( stderr !== '' ) {\n        error = new Error( 'error extracting DXF text ' +\n          path.basename( filePath ) + ': ' + stderr );\n        cb( error, null );\n        return;\n      }\n\n      cb( null, stdout );\n    }\n  );\n}\n\nfunction testForBinary( options, cb ) {\n  exec( 'drawingtotext notalegalfile',\n    function( error, stdout, stderr ) {\n      var msg\n        , errorRegex = /I couldn't make sense of your input/\n        ;\n\n      if ( !( stderr && errorRegex.test( stderr ) ) ) {\n        msg = 'INFO: \\'drawingtotext\\' does not appear to be installed, ' +\n          'so textract will be unable to extract DXFs.';\n        cb( false, msg );\n      } else {\n        cb( true );\n      }\n    }\n  );\n}\n\nmodule.exports = {\n  types: [\n    'application/dxf',\n    'application/x-autocad',\n    'application/x-dxf',\n    'drawing/x-dxf',\n    'image/vnd.dxf',\n    'image/x-autocad',\n    'image/x-dxf',\n    'zz-application/zz-winassoc-dxf'\n  ],\n  extract: extractText,\n  test: testForBinary\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/html.js":"/* eslint-disable max-len */\n\nvar cheerio = require( 'cheerio' )\n  , fs = require( 'fs' )\n  ;\n\nfunction extractFromText( data, cb ) {\n  var $, text;\n\n  text = data.toString()\n    .replace( /< *(br|p|div|section|aside|button|header|footer|li|article|blockquote|cite|code|h1|h2|h3|h4|h5|h6|legend|nav)((.*?)>)/g, '<$1$2|||||' )\n    .replace( /< *\\/(td|a|option) *>/g, ' </$1>' ) // spacing some things out so text doesn't get smashed together\n    .replace( /< *(a|td|option)/g, ' <$1' ) // spacing out links\n    .replace( /< *(br|hr) +\\/>/g, '|||||<$1\\\\>' )\n    .replace( /<\\/ +?(p|div|section|aside|button|header|footer|li|article|blockquote|cite|code|h1|h2|h3|h4|h5|h6|legend|nav)>/g, '|||||</$1>' );\n\n  text = '<textractwrapper>' + text + '<textractwrapper>';\n\n  try {\n    $ = cheerio.load( text );\n    $( 'script' ).remove();\n    $( 'style' ).remove();\n    $( 'noscript' ).remove();\n\n    text = $( 'textractwrapper' ).text().replace( /\\|\\|\\|\\|\\|/g, '\\n' )\n      .replace( /(\\n\\u00A0|\\u00A0\\n|\\n | \\n)+/g, '\\n' )\n      .replace( /(\\r\\u00A0|\\u00A0\\r|\\r | \\r)+/g, '\\n' )\n      .replace( /(\\v\\u00A0|\\u00A0\\v|\\v | \\v)+/g, '\\n' )\n      .replace( /(\\t\\u00A0|\\u00A0\\t|\\t | \\t)+/g, '\\n' )\n      .replace( /[\\n\\r\\t\\v]+/g, '\\n' )\n      ;\n  } catch ( err ) {\n    cb( err, null );\n    return;\n  }\n\n  cb( null, text );\n}\n\nfunction extractText( filePath, options, cb ) {\n  fs.readFile( filePath, function( error, data ) {\n    if ( error ) {\n      cb( error, null );\n      return;\n    }\n    extractFromText( data, cb );\n  });\n}\n\nmodule.exports = {\n  types: [\n    'text/html',\n    'text/xml',\n    'application/xml'\n  ],\n  extract: extractText,\n  extractFromText: extractFromText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/images.js":"var exec = require( 'child_process' ).exec\n  , util = require( '../util' )\n  ;\n\nfunction tesseractExtractionCommand( options, inputFile, outputFile ) {\n  var cmd = 'tesseract ' + inputFile + ' ' + outputFile;\n  if ( options.tesseract ) {\n    if ( options.tesseract.lang ) {\n      cmd += ' -l ' + options.tesseract.lang;\n    } else if ( options.tesseract.cmd ) {\n      cmd += ' ' + options.tesseract.cmd;\n    }\n  }\n  cmd += ' quiet';\n  return cmd;\n}\n\nfunction extractText( filePath, options, cb ) {\n  var execOptions = util.createExecOptions( 'images', options );\n  util.runExecIntoFile( 'tesseract', filePath, options,\n    execOptions, tesseractExtractionCommand, cb );\n}\n\nfunction testForBinary( options, cb ) {\n  exec( 'tesseract',\n    function( error, stdout, stderr ) {\n      var msg;\n      // checking for content of help text\n      if ( ( error && error.toString().indexOf( 'Usage:' ) > -1 ) ||\n          ( stderr && stderr.toString().indexOf( 'Usage:' ) > -1 ) ||\n          ( stdout && stdout.toString().indexOf( 'Usage:' ) > -1 ) ) {\n        cb( true );\n      } else {\n        msg = 'INFO: \\'tesseract\\' does not appear to be installed, ' +\n         'so textract will be unable to extract images.';\n        cb( false, msg );\n      }\n    }\n  );\n}\n\nmodule.exports = {\n  types: ['image/png', 'image/jpeg', 'image/gif'],\n  extract: extractText,\n  test: testForBinary\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/md.js":"var fs = require( 'fs' )\n  , marked = require( 'marked' )\n  , htmlExtract = require( './html' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  fs.readFile( filePath, function( error, data ) {\n    if ( error ) {\n      cb( error, null );\n      return;\n    }\n\n    marked( data.toString(), function( err, content ) {\n      if ( err ) {\n        cb( err, null );\n      } else {\n        htmlExtract.extractFromText( content, cb );\n      }\n    });\n  });\n}\n\nmodule.exports = {\n  types: ['text/x-markdown'],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/odt.js":"var cheerio = require( 'cheerio' )\n  , yauzl = require( 'yauzl' )\n  , util = require( '../util' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  yauzl.open( filePath, function( err, zipfile ) {\n    var textOnTheWay = false;\n\n    if ( err ) {\n      util.yauzlError( err, cb );\n      return;\n    }\n\n    zipfile.on( 'end', function() {\n      if ( !textOnTheWay ) {\n        cb(\n          new Error( 'Extraction could not find content.xml in file, ' +\n            'are you sure it is the mime type it says it is?' ),\n          null );\n      }\n    });\n\n    zipfile.on( 'entry', function( entry ) {\n      if ( entry.fileName === 'content.xml' ) {\n        textOnTheWay = true;\n        util.getTextFromZipFile( zipfile, entry, function( err2, text ) {\n          var output = text\n              .replace( 'inflating: content.xml', '' )\n              .replace( /^(.Archive).*/, '' )\n              .replace( /text:p/g, 'textractTextNode' )\n              .replace( /text:h/g, 'textractTextNode' )\n              .replace( /<textractTextNode\\/>/g, '' )\n              .trim()\n            , $ = cheerio.load( '<body>' + output + '</body>' )\n            , nodes = $( 'textractTextNode' )\n            , nodeTexts = []\n            , i\n            ;\n\n          for ( i = 0; i < nodes.length; i++ ) {\n            nodeTexts.push( $( nodes[i] ).text() );\n          }\n\n          cb( null, nodeTexts.join( '\\n' ) );\n        });\n      }\n    });\n\n    zipfile.on( 'error', function( err3 ) {\n      cb( err3 );\n    });\n  });\n}\n\nmodule.exports = {\n  types: [\n    'application/vnd.oasis.opendocument.text',\n    'application/vnd.oasis.opendocument.text-template',\n    'application/vnd.oasis.opendocument.graphics',\n    'application/vnd.oasis.opendocument.graphics-template',\n    'application/vnd.oasis.opendocument.presentation',\n    'application/vnd.oasis.opendocument.presentation-template'\n  ],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/pdf.js":"var path = require( 'path' )\n  , exec = require( 'child_process' ).exec\n  , extract = require( 'pdf-text-extract' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  // See https://github.com/dbashford/textract/issues/75 for description of\n  // what is happening here\n  var pdftotextOptions = options.pdftotextOptions || { layout: 'raw' };\n\n  extract( filePath, pdftotextOptions, function( error, pages ) {\n    var fullText;\n    if ( error ) {\n      error = new Error( 'Error extracting PDF text for file at [[ ' +\n        path.basename( filePath ) + ' ]], error: ' + error.message );\n      cb( error, null );\n      return;\n    }\n    fullText = pages.join( ' ' ).trim();\n    cb( null, fullText );\n  });\n}\n\nfunction testForBinary( options, cb ) {\n  exec( 'pdftotext -v',\n    function( error, stdout, stderr ) {\n      var msg;\n      if ( stderr && stderr.indexOf( 'pdftotext version' ) > -1 ) {\n        cb( true );\n      } else {\n        msg = 'INFO: \\'pdftotext\\' does not appear to be installed, ' +\n         'so textract will be unable to extract PDFs.';\n        cb( false, msg );\n      }\n    }\n  );\n}\n\nmodule.exports = {\n  types: ['application/pdf'],\n  extract: extractText,\n  test: testForBinary\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/ppt.js":"/* eslint-disable */\n\nvar fs = require( 'fs' );\n  //, ppt = require( 'ppt' );\n\nvar extractText = function( filePath, options, cb ) {\n  /*\n  var captured = ppt.readFile(filePath);\n  console.log('CAPTURED!!!!')\n  console.log(captured)\n  console.log('CAPTURED!!!!')\n  cb( null, null );\n    if ( error ) {\n      cb( error, null );\n      return;\n    }\n    cb( null, data.toString() );\n  */\n};\n\nmodule.exports = {\n  // types: ['application/vnd.ms-powerpoint'],\n  types:[],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/pptx.js":"var xpath = require( 'xpath' )\n  , Dom = require( 'xmldom' ).DOMParser\n  , yauzl = require( 'yauzl' )\n  , util = require( '../util' )\n  , slideMatch = /^ppt\\/slides\\/slide/\n  ;\n\nfunction _compareSlides( a, b ) {\n  if ( a.slide < b.slide ) {\n    return -1;\n  }\n  if ( a.slide > b.slide ) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction _calculateExtractedText( slideText ) {\n  var doc = new Dom().parseFromString( slideText )\n    , ps = xpath.select( \"//*[local-name()='p']\", doc )\n    , text = ''\n    ;\n\n  ps.forEach( function( paragraph ) {\n    var ts\n      , localText = ''\n      ;\n\n    paragraph = new Dom().parseFromString( paragraph.toString() );\n    ts = xpath.select( \"//*[local-name()='t' or local-name()='tab' or local-name()='br']\",\n      paragraph );\n    ts.forEach( function( t ) {\n      if ( t.localName === 't' && t.childNodes.length > 0 ) {\n        localText += t.childNodes[0].data;\n      } else {\n        if ( t.localName === 'tab' || t.localName === 'br' ) {\n          localText += '';\n        }\n      }\n    });\n    text += localText + '\\n';\n  });\n\n  return text;\n}\n\nfunction extractText( filePath, options, cb ) {\n  var slides = [];\n\n  yauzl.open( filePath, function( err, zipfile ) {\n    if ( err ) {\n      util.yauzlError( err, cb );\n      return;\n    }\n\n    zipfile.on( 'end', function() {\n      var slidesText, text;\n      if ( slides.length ) {\n        slides.sort( _compareSlides );\n        slidesText = slides.map( function( slide ) {\n          return slide.text;\n        }).join( '\\n' );\n        text = _calculateExtractedText( slidesText );\n        cb( null, text );\n      } else {\n        cb(\n          new Error( 'Extraction could not find slides in file, are you' +\n            ' sure it is the mime type it says it is?' ),\n          null );\n      }\n    });\n\n    zipfile.on( 'entry', function( entry ) {\n      if ( slideMatch.test( entry.fileName ) ) {\n        util.getTextFromZipFile( zipfile, entry, function( err2, text ) {\n          var slide = +entry.fileName.replace( 'ppt/slides/slide', '' ).replace( '.xml', '' );\n          slides.push({ slide: slide, text: text });\n        });\n      }\n    });\n\n    zipfile.on( 'error', function( err3 ) {\n      cb( err3 );\n    });\n  });\n}\n\nmodule.exports = {\n  types: [\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'application/vnd.openxmlformats-officedocument.presentationml.template'],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/rtf.js":"var exec = require( 'child_process' ).exec\n  , os = require( 'os' )\n  , path = require( 'path' )\n  , htmlExtract = require( './html' )\n  , types\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  var escapedPath = filePath.replace( /\\s/g, '\\\\ ' );\n\n  // Going to output html from unrtf because unrtf does a great job of\n  // going to html, but does a crap job of going to text. It leaves sections\n  // out, strips apostrophes, leaves nasty quotes in for bullets and more\n  // that I've likely not yet discovered.\n  //\n  // textract can go from html to text on its own, so let unrtf go to html\n  // then extract the text from that\n  //\n  // Also do not have to worry about stripping comments from unrtf text\n  // output since HTML comments are not included in output. Also, the\n  // unrtf --quiet option doesn't work.\n  exec( 'unrtf --html --nopict ' + escapedPath,\n    function( error, stdout /* , stderr */ ) {\n      var err;\n      if ( error ) {\n        err = new Error( 'unrtf read of file named [[ ' +\n          path.basename( filePath ) + ' ]] failed: ' + error );\n        cb( err, null );\n      } else {\n        htmlExtract.extractFromText( stdout.trim(), cb );\n      }\n    }\n  );\n}\n\nfunction testForBinary( options, cb ) {\n  // just non-osx extractor\n  if ( os.platform() === 'darwin' ) {\n    cb( true );\n    return;\n  }\n\n  exec( 'unrtf ' + __filename,\n    function( error /* , stdout, stderr */ ) {\n      var msg;\n      if ( error !== null && error.message &&\n          error.message.indexOf( 'not found' ) !== -1 ) {\n        msg = 'INFO: \\'unrtf\\' does not appear to be installed, ' +\n          'so textract will be unable to extract RTFs.';\n        cb( false, msg );\n      } else {\n        cb( true );\n      }\n    }\n  );\n}\n\n// rely on native tools on osx\nif ( os.platform() === 'darwin' ) {\n  types = [];\n  // types = ['application/rtf', 'text/rtf'];\n} else {\n  types = ['application/rtf', 'text/rtf'];\n}\n\nmodule.exports = {\n  types: types,\n  extract: extractText,\n  test: testForBinary\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/text.js":"var fs = require( 'fs' )\n  , iconv = require( 'iconv-lite' )\n  , jschardet = require( 'jschardet' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  fs.readFile( filePath, function( error, data ) {\n    var encoding, decoded;\n    if ( error ) {\n      cb( error, null );\n      return;\n    }\n    try {\n      encoding = jschardet.detect( data ).encoding.toLowerCase();\n      decoded = iconv.decode( data, encoding );\n    } catch ( e ) {\n      cb( e );\n      return;\n    }\n    cb( null, decoded );\n  });\n}\n\nmodule.exports = {\n  types: [/text\\//, 'application/csv', 'application/javascript'],\n  extract: extractText\n};\n","/home/travis/build/npmtest/node-npmtest-textract/node_modules/textract/lib/extractors/xls.js":"var path = require( 'path' )\n  , J = require( 'j' )\n  ;\n\nfunction extractText( filePath, options, cb ) {\n  var CSVs, wb, result, error;\n\n  try {\n    wb = J.readFile( filePath );\n    CSVs = J.utils.to_csv( wb );\n  } catch ( err ) {\n    error = new Error( 'Could not extract ' + path.basename( filePath ) + ', ' + err );\n    cb( error, null );\n    return;\n  }\n\n  result = '';\n  Object.keys( CSVs ).forEach( function( key ) {\n    result += CSVs[key];\n  });\n\n  cb( null, result );\n}\n\nmodule.exports = {\n  types: ['application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.ms-excel.sheet.binary.macroEnabled.12',\n    'application/vnd.ms-excel.sheet.macroEnabled.12',\n    'application/vnd.oasis.opendocument.spreadsheet',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n    'application/vnd.oasis.opendocument.spreadsheet-template'\n  ],\n  extract: extractText\n};\n"}